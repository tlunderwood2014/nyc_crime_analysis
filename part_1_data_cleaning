{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n",
    "from sklearn.preprocessing import PolynomialFeatures, StandardScaler\n",
    "from sklearn.linear_model import Lasso, LassoCV, LinearRegression, Ridge, RidgeCV\n",
    "\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import r2_score, mean_squared_error\n",
    "\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "import statsmodels.api as sm\n",
    "\n",
    "import missingno as msno\n",
    "\n",
    "\n",
    "pd.options.display.max_columns = 100\n",
    "pd.options.display.max_rows = 3000\n",
    "pd.options.display.max_colwidth = 400"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('data/NYC0809_with_income.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>join_count</th>\n",
       "      <th>target_fid</th>\n",
       "      <th>join_count_1</th>\n",
       "      <th>target_fid_1</th>\n",
       "      <th>field1</th>\n",
       "      <th>cmplnt_num</th>\n",
       "      <th>cmplnt_fr_dt</th>\n",
       "      <th>cmplnt_fr_tm</th>\n",
       "      <th>cmplnt_to_dt</th>\n",
       "      <th>cmplnt_to_tm</th>\n",
       "      <th>addr_pct_cd</th>\n",
       "      <th>rpt_dt</th>\n",
       "      <th>ky_cd</th>\n",
       "      <th>ofns_desc</th>\n",
       "      <th>pd_cd</th>\n",
       "      <th>pd_desc</th>\n",
       "      <th>crm_atpt_cptd_cd</th>\n",
       "      <th>law_cat_cd</th>\n",
       "      <th>boro_nm</th>\n",
       "      <th>loc_of_occur_desc</th>\n",
       "      <th>prem_typ_desc</th>\n",
       "      <th>juris_desc</th>\n",
       "      <th>jurisdiction_code</th>\n",
       "      <th>parks_nm</th>\n",
       "      <th>hadevelopt</th>\n",
       "      <th>housing_psa</th>\n",
       "      <th>x_coord_cd</th>\n",
       "      <th>y_coord_cd</th>\n",
       "      <th>susp_age_group</th>\n",
       "      <th>susp_race</th>\n",
       "      <th>susp_sex</th>\n",
       "      <th>transit_district</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>lat_lon</th>\n",
       "      <th>patrol_boro</th>\n",
       "      <th>station_name</th>\n",
       "      <th>vic_age_group</th>\n",
       "      <th>vic_race</th>\n",
       "      <th>vic_sex</th>\n",
       "      <th>borocode</th>\n",
       "      <th>boroname</th>\n",
       "      <th>countyfips</th>\n",
       "      <th>ntacode</th>\n",
       "      <th>ntaname</th>\n",
       "      <th>shape_leng</th>\n",
       "      <th>neighborhood</th>\n",
       "      <th>zipcode_x</th>\n",
       "      <th>bldgzip</th>\n",
       "      <th>po_name</th>\n",
       "      <th>population</th>\n",
       "      <th>area</th>\n",
       "      <th>state_x</th>\n",
       "      <th>county</th>\n",
       "      <th>st_fips</th>\n",
       "      <th>cty_fips</th>\n",
       "      <th>url</th>\n",
       "      <th>zipcodes</th>\n",
       "      <th>state_y</th>\n",
       "      <th>zipcode_y</th>\n",
       "      <th>number_of_returns</th>\n",
       "      <th>adjusted_gross_income_(agi)</th>\n",
       "      <th>avg_agi</th>\n",
       "      <th>number_of_returns_with_total_income</th>\n",
       "      <th>total_income_amount</th>\n",
       "      <th>avg_total_income</th>\n",
       "      <th>number_of_returns_with_taxable_income</th>\n",
       "      <th>taxable_income_amount</th>\n",
       "      <th>avg_taxable_income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>117</td>\n",
       "      <td>686917220</td>\n",
       "      <td>2018-04-18</td>\n",
       "      <td>16:58:00</td>\n",
       "      <td>2019-04-18</td>\n",
       "      <td>17:01:00</td>\n",
       "      <td>88.0</td>\n",
       "      <td>4/18/2019 0:00:00</td>\n",
       "      <td>344</td>\n",
       "      <td>ASSAULT 3 &amp; RELATED OFFENSES</td>\n",
       "      <td>101.0</td>\n",
       "      <td>ASSAULT 3</td>\n",
       "      <td>COMPLETED</td>\n",
       "      <td>MISDEMEANOR</td>\n",
       "      <td>BROOKLYN</td>\n",
       "      <td>FRONT OF</td>\n",
       "      <td>OTHER</td>\n",
       "      <td>N.Y. POLICE DEPT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>U</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PATROL BORO BKLYN NORTH</td>\n",
       "      <td>NaN</td>\n",
       "      <td>45-64</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BROOKLYN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>157</td>\n",
       "      <td>444236774</td>\n",
       "      <td>2018-07-13</td>\n",
       "      <td>23:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42.0</td>\n",
       "      <td>4/12/2019 0:00:00</td>\n",
       "      <td>101</td>\n",
       "      <td>MURDER &amp; NON-NEGL. MANSLAUGHTER</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>COMPLETED</td>\n",
       "      <td>FELONY</td>\n",
       "      <td>NaN</td>\n",
       "      <td>OUTSIDE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N.Y. POLICE DEPT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>45-64</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>235</td>\n",
       "      <td>864262100</td>\n",
       "      <td>2018-03-27</td>\n",
       "      <td>22:00:00</td>\n",
       "      <td>2019-04-01</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>94.0</td>\n",
       "      <td>4/1/2019 0:00:00</td>\n",
       "      <td>578</td>\n",
       "      <td>HARRASSMENT 2</td>\n",
       "      <td>638.0</td>\n",
       "      <td>HARASSMENT,SUBD 3,4,5</td>\n",
       "      <td>COMPLETED</td>\n",
       "      <td>VIOLATION</td>\n",
       "      <td>BROOKLYN</td>\n",
       "      <td>INSIDE</td>\n",
       "      <td>RESIDENCE - APT. HOUSE</td>\n",
       "      <td>N.Y. POLICE DEPT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>U</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PATROL BORO BKLYN NORTH</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25-44</td>\n",
       "      <td>WHITE</td>\n",
       "      <td>F</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BROOKLYN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>313</td>\n",
       "      <td>383311341</td>\n",
       "      <td>2018-11-14</td>\n",
       "      <td>18:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>105.0</td>\n",
       "      <td>3/22/2019 0:00:00</td>\n",
       "      <td>116</td>\n",
       "      <td>SEX CRIMES</td>\n",
       "      <td>168.0</td>\n",
       "      <td>SODOMY 1</td>\n",
       "      <td>COMPLETED</td>\n",
       "      <td>FELONY</td>\n",
       "      <td>QUEENS</td>\n",
       "      <td>INSIDE</td>\n",
       "      <td>RESIDENCE-HOUSE</td>\n",
       "      <td>N.Y. POLICE DEPT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>U</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PATROL BORO QUEENS SOUTH</td>\n",
       "      <td>NaN</td>\n",
       "      <td>&lt;18</td>\n",
       "      <td>BLACK</td>\n",
       "      <td>F</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>QUEENS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>429</td>\n",
       "      <td>555889431</td>\n",
       "      <td>2018-11-12</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>2019-03-28</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>61.0</td>\n",
       "      <td>3/28/2019 0:00:00</td>\n",
       "      <td>341</td>\n",
       "      <td>PETIT LARCENY</td>\n",
       "      <td>349.0</td>\n",
       "      <td>LARCENY,PETIT OF LICENSE PLATE</td>\n",
       "      <td>COMPLETED</td>\n",
       "      <td>MISDEMEANOR</td>\n",
       "      <td>BROOKLYN</td>\n",
       "      <td>REAR OF</td>\n",
       "      <td>RESIDENCE-HOUSE</td>\n",
       "      <td>N.Y. POLICE DEPT</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PATROL BORO BKLYN SOUTH</td>\n",
       "      <td>NaN</td>\n",
       "      <td>45-64</td>\n",
       "      <td>WHITE</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BROOKLYN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   join_count  target_fid  join_count_1  target_fid_1  field1  cmplnt_num  \\\n",
       "0           0           1             0             1     117   686917220   \n",
       "1           0           2             0             2     157   444236774   \n",
       "2           0           3             0             3     235   864262100   \n",
       "3           0           4             0             4     313   383311341   \n",
       "4           0           5             0             5     429   555889431   \n",
       "\n",
       "  cmplnt_fr_dt cmplnt_fr_tm cmplnt_to_dt cmplnt_to_tm  addr_pct_cd  \\\n",
       "0   2018-04-18     16:58:00   2019-04-18     17:01:00         88.0   \n",
       "1   2018-07-13     23:00:00          NaN          NaN         42.0   \n",
       "2   2018-03-27     22:00:00   2019-04-01     08:00:00         94.0   \n",
       "3   2018-11-14     18:00:00          NaN          NaN        105.0   \n",
       "4   2018-11-12     08:00:00   2019-03-28     08:00:00         61.0   \n",
       "\n",
       "              rpt_dt  ky_cd                        ofns_desc  pd_cd  \\\n",
       "0  4/18/2019 0:00:00    344     ASSAULT 3 & RELATED OFFENSES  101.0   \n",
       "1  4/12/2019 0:00:00    101  MURDER & NON-NEGL. MANSLAUGHTER    NaN   \n",
       "2   4/1/2019 0:00:00    578                    HARRASSMENT 2  638.0   \n",
       "3  3/22/2019 0:00:00    116                       SEX CRIMES  168.0   \n",
       "4  3/28/2019 0:00:00    341                    PETIT LARCENY  349.0   \n",
       "\n",
       "                          pd_desc crm_atpt_cptd_cd   law_cat_cd   boro_nm  \\\n",
       "0                       ASSAULT 3        COMPLETED  MISDEMEANOR  BROOKLYN   \n",
       "1                             NaN        COMPLETED       FELONY       NaN   \n",
       "2           HARASSMENT,SUBD 3,4,5        COMPLETED    VIOLATION  BROOKLYN   \n",
       "3                        SODOMY 1        COMPLETED       FELONY    QUEENS   \n",
       "4  LARCENY,PETIT OF LICENSE PLATE        COMPLETED  MISDEMEANOR  BROOKLYN   \n",
       "\n",
       "  loc_of_occur_desc           prem_typ_desc        juris_desc  \\\n",
       "0          FRONT OF                   OTHER  N.Y. POLICE DEPT   \n",
       "1           OUTSIDE                     NaN  N.Y. POLICE DEPT   \n",
       "2            INSIDE  RESIDENCE - APT. HOUSE  N.Y. POLICE DEPT   \n",
       "3            INSIDE         RESIDENCE-HOUSE  N.Y. POLICE DEPT   \n",
       "4           REAR OF         RESIDENCE-HOUSE  N.Y. POLICE DEPT   \n",
       "\n",
       "   jurisdiction_code parks_nm hadevelopt  housing_psa  x_coord_cd  y_coord_cd  \\\n",
       "0                0.0      NaN        NaN          NaN         NaN         NaN   \n",
       "1                NaN      NaN        NaN          NaN         NaN         NaN   \n",
       "2                0.0      NaN        NaN          NaN         NaN         NaN   \n",
       "3                0.0      NaN        NaN          NaN         NaN         NaN   \n",
       "4                0.0      NaN        NaN          NaN         NaN         NaN   \n",
       "\n",
       "  susp_age_group susp_race susp_sex  transit_district  latitude  longitude  \\\n",
       "0        UNKNOWN   UNKNOWN        U               NaN       NaN        NaN   \n",
       "1            NaN       NaN      NaN               NaN       NaN        NaN   \n",
       "2        UNKNOWN   UNKNOWN        U               NaN       NaN        NaN   \n",
       "3        UNKNOWN     BLACK        U               NaN       NaN        NaN   \n",
       "4            NaN       NaN      NaN               NaN       NaN        NaN   \n",
       "\n",
       "  lat_lon               patrol_boro station_name vic_age_group vic_race  \\\n",
       "0     NaN   PATROL BORO BKLYN NORTH          NaN         45-64    BLACK   \n",
       "1     NaN                       NaN          NaN         45-64    BLACK   \n",
       "2     NaN   PATROL BORO BKLYN NORTH          NaN         25-44    WHITE   \n",
       "3     NaN  PATROL BORO QUEENS SOUTH          NaN           <18    BLACK   \n",
       "4     NaN   PATROL BORO BKLYN SOUTH          NaN         45-64    WHITE   \n",
       "\n",
       "  vic_sex  borocode boroname  countyfips ntacode ntaname  shape_leng  \\\n",
       "0       M       NaN      NaN         NaN     NaN     NaN         NaN   \n",
       "1       M       NaN      NaN         NaN     NaN     NaN         NaN   \n",
       "2       F       NaN      NaN         NaN     NaN     NaN         NaN   \n",
       "3       F       NaN      NaN         NaN     NaN     NaN         NaN   \n",
       "4       M       NaN      NaN         NaN     NaN     NaN         NaN   \n",
       "\n",
       "  neighborhood  zipcode_x  bldgzip po_name  population  area state_x county  \\\n",
       "0     BROOKLYN        NaN      NaN     NaN         NaN   NaN     NaN    NaN   \n",
       "1          NaN        NaN      NaN     NaN         NaN   NaN     NaN    NaN   \n",
       "2     BROOKLYN        NaN      NaN     NaN         NaN   NaN     NaN    NaN   \n",
       "3       QUEENS        NaN      NaN     NaN         NaN   NaN     NaN    NaN   \n",
       "4     BROOKLYN        NaN      NaN     NaN         NaN   NaN     NaN    NaN   \n",
       "\n",
       "   st_fips  cty_fips  url  zipcodes state_y  zipcode_y  number_of_returns  \\\n",
       "0      NaN       NaN  NaN       NaN     NaN        NaN                NaN   \n",
       "1      NaN       NaN  NaN       NaN     NaN        NaN                NaN   \n",
       "2      NaN       NaN  NaN       NaN     NaN        NaN                NaN   \n",
       "3      NaN       NaN  NaN       NaN     NaN        NaN                NaN   \n",
       "4      NaN       NaN  NaN       NaN     NaN        NaN                NaN   \n",
       "\n",
       "   adjusted_gross_income_(agi)  avg_agi  number_of_returns_with_total_income  \\\n",
       "0                          NaN      NaN                                  NaN   \n",
       "1                          NaN      NaN                                  NaN   \n",
       "2                          NaN      NaN                                  NaN   \n",
       "3                          NaN      NaN                                  NaN   \n",
       "4                          NaN      NaN                                  NaN   \n",
       "\n",
       "   total_income_amount  avg_total_income  \\\n",
       "0                  NaN               NaN   \n",
       "1                  NaN               NaN   \n",
       "2                  NaN               NaN   \n",
       "3                  NaN               NaN   \n",
       "4                  NaN               NaN   \n",
       "\n",
       "   number_of_returns_with_taxable_income  taxable_income_amount  \\\n",
       "0                                    NaN                    NaN   \n",
       "1                                    NaN                    NaN   \n",
       "2                                    NaN                    NaN   \n",
       "3                                    NaN                    NaN   \n",
       "4                                    NaN                    NaN   \n",
       "\n",
       "   avg_taxable_income  \n",
       "0                 NaN  \n",
       "1                 NaN  \n",
       "2                 NaN  \n",
       "3                 NaN  \n",
       "4                 NaN  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['join_count', 'target_fid', 'join_count_1', 'target_fid_1', 'field1',\n",
       "       'cmplnt_num', 'cmplnt_fr_dt', 'cmplnt_fr_tm', 'cmplnt_to_dt',\n",
       "       'cmplnt_to_tm', 'addr_pct_cd', 'rpt_dt', 'ky_cd', 'ofns_desc', 'pd_cd',\n",
       "       'pd_desc', 'crm_atpt_cptd_cd', 'law_cat_cd', 'boro_nm',\n",
       "       'loc_of_occur_desc', 'prem_typ_desc', 'juris_desc', 'jurisdiction_code',\n",
       "       'parks_nm', 'hadevelopt', 'housing_psa', 'x_coord_cd', 'y_coord_cd',\n",
       "       'susp_age_group', 'susp_race', 'susp_sex', 'transit_district',\n",
       "       'latitude', 'longitude', 'lat_lon', 'patrol_boro', 'station_name',\n",
       "       'vic_age_group', 'vic_race', 'vic_sex', 'borocode', 'boroname',\n",
       "       'countyfips', 'ntacode', 'ntaname', 'shape_leng', 'neighborhood',\n",
       "       'zipcode_x', 'bldgzip', 'po_name', 'population', 'area', 'state_x',\n",
       "       'county', 'st_fips', 'cty_fips', 'url', 'zipcodes', 'state_y',\n",
       "       'zipcode_y', 'number_of_returns', 'adjusted_gross_income_(agi)',\n",
       "       'avg_agi', 'number_of_returns_with_total_income', 'total_income_amount',\n",
       "       'avg_total_income', 'number_of_returns_with_taxable_income',\n",
       "       'taxable_income_amount', 'avg_taxable_income'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns=['join_count', 'target_fid', 'join_count_1', 'target_fid_1', 'field1', 'cmplnt_to_dt','cmplnt_to_tm'], inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns=['crm_atpt_cptd_cd','loc_of_occur_desc', 'juris_desc', 'parks_nm', 'hadevelopt', 'housing_psa'], inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns=['x_coord_cd', 'y_coord_cd','transit_district','station_name', 'borocode', 'boroname'], inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns=['countyfips', 'ntacode', 'ntaname', 'shape_leng', 'neighborhood','bldgzip', 'po_name'], inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns=['zipcode_x', 'zipcode_y','number_of_returns_with_taxable_income','number_of_returns'], inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns=['number_of_returns_with_total_income', 'addr_pct_cd', 'jurisdiction_code', 'lat_lon'], inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns=['state_x','st_fips', 'cty_fips', 'url','state_y'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "msno.matrix(df);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1728x720 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "msno.bar(df);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.replace({'susp_sex': np.nan}, {'susp_sex': 'U'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.replace({'susp_race': np.nan}, {'susp_race': 'unknown'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.replace({'susp_age_group': np.nan}, {'susp_age_group': '0'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.replace({'vic_age_group': np.nan}, {'vic_age_group': '0'}, inplace = True)\n",
    "df.replace({'vic_race': np.nan}, {'vic_race': 'unknown'}, inplace = True)\n",
    "df.replace({'vic_sex': np.nan}, {'vic_sex': 'u'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['vic_age_group'] = df['vic_age_group'].replace('936','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-2','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-56','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-974','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-970','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('929','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-956','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-967','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-948','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('951','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-954','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-67','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-952','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-943','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-3','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-968','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('943','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-59','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-961','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-43','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-55','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('948','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('937','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-71','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('954','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-962','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('922','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-934','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('927','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-76','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-940','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-955','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('970','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('956','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('941','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('1013','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-50','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-978','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-51','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('960','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('965','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-39','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-958','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('938','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-5','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-69','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('1018','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('953','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-4','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-966','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-61','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-1','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('957','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('1017','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-972','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-946','0')\n",
    "df['vic_age_group'] = df['vic_age_group'].replace('-942','0')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['cmplnt_num']= df['cmplnt_num'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['cmplnt_fr_dt'] = pd.to_datetime(df['cmplnt_fr_dt'] ,errors = 'coerce' )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['cmplnt_fr_tm'] = pd.to_datetime(df['cmplnt_fr_tm'], errors = 'coerce') #, origin= 'Timestamp', ret = 'Timestamp' )\n",
    "df['cmplnt_fr_tm'] = df['cmplnt_fr_tm'].dt.strftime('%H:%M %p')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['rpt_dt'] = pd.to_datetime(df['rpt_dt'] ,errors = 'coerce' )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['ofns_desc'] = df['ofns_desc'].replace(0,'unknown')\n",
    "df.replace({'ofns_desc': np.nan}, {'ofns_desc': 'unknown'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['ofns_desc'] = df['ofns_desc'].replace('CHILD ABANDONMENT/NON SUPPORT','CHILD ABANDONMENT/ NON SUPPORT')\n",
    "df['ofns_desc'] = df['ofns_desc'].replace('LOITERING/GAMBLING (CARDS, DIC', 'LOITERING/ GAMBLING (CARDS, DIC')\n",
    "df['ofns_desc'] = df['ofns_desc'].replace('THEFT-FRAUD', 'THEFT- FRAUD')\n",
    "df['ofns_desc'] = df['ofns_desc'].replace('NYS LAWS-UNCLASSIFIED VIOLATION', 'NYS LAWS- UNCLASSIFIED VIOLATION')\n",
    "df['ofns_desc'] = df['ofns_desc'].replace('NYS LAWS-UNCLASSIFIED FELONY', 'NYS LAWS- UNCLASSIFIED FELONY')\n",
    "df['ofns_desc'] = df['ofns_desc'].replace('HOMICIDE-NEGLIGENT,UNCLASSIFIE', 'HOMICIDE- NEGLIGENT, UNCLASSIFIE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.replace({'pd_cd': np.nan}, {'pd_cd': '0'}, inplace = True)\n",
    "df['pd_cd'] = df['pd_cd'].astype(int) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['boro_nm'] = df['boro_nm'].replace(0,'unknown')\n",
    "df.replace({'boro_nm': np.nan}, {'boro_nm': 'unknown'}, inplace = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace(0,'unknown')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('PHOTO/COPY','PHOTO/ COPY')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('TAXI/LIVERY (UNLICENSED)','TAXI/ LIVERY (UNLICENSED)')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('BOOK/CARD','BOOK/ CARD')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('MARINA/PIER','MARINA/ PIER')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('FERRY/FERRY TERMINAL','SFERRY/ FERRY TERMINAL')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('SOCIAL CLUB/POLICY','SOCIAL CLUB/ POLICY')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('RESIDENCE-HOUSE','RESIDENCE- HOUSE')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('GROCERY/BODEGA','GROCERY/ BODEGA')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('RESTAURANT/DINER','RESTAURANT/ DINER')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('BAR/NIGHT CLUB','BAR/ NIGHT CLUB')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('PARK/PLAYGROUND','PARK/ PLAYGROUND')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('CLOTHING/BOUTIQUE','CLOTHING/ BOUTIQUE')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('HOTEL/MOTEL','HOTEL/ MOTEL')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('PARKING LOT/GARAGE (PUBLIC)','PARKING LOT/ GARAGE (PUBLIC)')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('PARKING LOT/GARAGE (PRIVATE)','PARKING LOT/ GARAGE (PRIVATE)')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('HIGHWAY/PARKWAY','HIGHWAY/ PARKWAY')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('GYM/FITNESS FACILITY','GYM/ FITNESS FACILITY')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('DOCTOR/DENTIST OFFICE','DOCTOR/ DENTIST OFFICE')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('DRY CLEANER/LAUNDRY','DRY CLEANER/ LAUNDRY')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('FACTORY/WAREHOUSE','FACTORY/ WAREHOUSE')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('PRIVATE/PAROCHIAL SCHOOL','PRIVATE/ PAROCHIAL SCHOOL')                                          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['susp_age_group'] = df['susp_age_group'].replace('2018','0')\n",
    "df['susp_age_group'] = df['susp_age_group'].replace('924','0')\n",
    "df['susp_age_group'] = df['susp_age_group'].replace('954','0')\n",
    "df['susp_age_group'] = df['susp_age_group'].replace('920','0')\n",
    "df['susp_age_group'] = df['susp_age_group'].replace('955','0')\n",
    "df['susp_age_group'] = df['susp_age_group'].replace('1018','0')\n",
    "df['susp_age_group'] = df['susp_age_group'].replace('952','0')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['susp_race'] = df['susp_race'].replace('AMERICAN INDIAN/ALASKAN NATIVE','AMERICAN INDIAN/ ALASKAN NATIVE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['patrol_boro'] = df['patrol_boro'].replace(0,'unknown')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['vic_race'] = df['vic_race'].replace(0,'unknown')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['vic_race'] = df['vic_race'].replace('AMERICAN INDIAN/ALASKAN NATIVE','AMERICAN INDIAN/ ALASKAN NATIVE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['vic_sex'] = df['vic_sex'].replace(0,'u')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "spec_chars = [\".\",\"-\",\"(\",\")\",\"/\",\",\", \"'\"]\n",
    "\n",
    "\n",
    "for char in spec_chars:\n",
    "    df['vic_sex'] = df['vic_sex'].str.lower().str.replace(char, '')\n",
    "    df['vic_race'] = df['vic_race'].str.lower().str.replace(char, '')\n",
    "    df['patrol_boro'] = df['patrol_boro'].str.lower().str.replace(char, '')\n",
    "    df['susp_sex'] = df['susp_sex'].str.lower().str.replace(char, '')\n",
    "    df['susp_race'] = df['susp_race'].str.lower().str.replace(char, '')\n",
    "    df['prem_typ_desc'] = df['prem_typ_desc'].str.lower().str.replace(char, '')\n",
    "    df['boro_nm'] = df['boro_nm'].str.lower().str.replace(char, '')\n",
    "    df['law_cat_cd'] = df['law_cat_cd'].str.lower().str.replace(char, '')\n",
    "    df['ofns_desc'] = df['ofns_desc'].str.lower().str.replace(char, '')\n",
    "    df['vic_age_group'] = df['vic_age_group'].str.lower().str.replace(char, '')\n",
    "    df['susp_age_group'] = df['susp_age_group'].str.lower().str.replace(char, '')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['vic_race'] = df['vic_race'].replace('asian  pacific islander','asian pacific islander')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['susp_race'] = df['susp_race'].replace('asian  pacific islander','asian pacific islander')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('transit  nyc subway','transit nyc subway')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('residence  apt house','residence apt house')\n",
    "df['prem_typ_desc'] = df['prem_typ_desc'].replace('residence  public housing','residence public housing')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "for char in spec_chars:\n",
    "    df['vic_sex'] = df['vic_sex'].str.replace(' ', '_')\n",
    "    df['vic_race'] = df['vic_race'].str.replace(' ', '_')\n",
    "    df['patrol_boro'] = df['patrol_boro'].str.replace(' ', '_')\n",
    "    df['susp_sex'] = df['susp_sex'].str.replace(' ', '_')\n",
    "    df['susp_race'] = df['susp_race'].str.replace(' ', '_')\n",
    "    df['prem_typ_desc'] = df['prem_typ_desc'].str.replace(' ', '_')\n",
    "    df['boro_nm'] = df['boro_nm'].str.replace(' ', '_')\n",
    "    df['law_cat_cd'] = df['law_cat_cd'].str.replace(' ', '_')\n",
    "    df['ofns_desc'] = df['ofns_desc'].str.replace(' ', '_')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['pd_cd'] = df['pd_cd'].astype(str)\n",
    "df['ky_cd'] = df['ky_cd'].astype(str)\n",
    "df['cmplnt_num'] = df['cmplnt_num'].astype(str)\n",
    "df['latitude'] = df['latitude'].astype(str)\n",
    "df['longitude'] = df['longitude'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['patrol_boro'] = df['patrol_boro'].replace('patrol_boro_bronx','bronx')\n",
    "df['patrol_boro'] = df['patrol_boro'].replace('patrol_boro_bklyn_north','bklyn_north')\n",
    "df['patrol_boro'] = df['patrol_boro'].replace('patrol_boro_bklyn_south','bklyn_south')\n",
    "df['patrol_boro'] = df['patrol_boro'].replace('patrol_boro_man_south','man_south')\n",
    "df['patrol_boro'] = df['patrol_boro'].replace('patrol_boro_man_north','man_north')\n",
    "df['patrol_boro'] = df['patrol_boro'].replace('patrol_boro_queens_north','queens_north')\n",
    "df['patrol_boro'] = df['patrol_boro'].replace('patrol_boro_queens_south','queens_south')\n",
    "df['patrol_boro'] = df['patrol_boro'].replace('patrol_boro_staten_island','staten_island')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['pd_desc'] = df['pd_desc'].replace('ROBBERY, CHAIN STORE','ROBBERY,CHAIN STORE')\n",
    "df['pd_desc'] = df['pd_desc'].replace('DRUG PARAPHERNALIA,   POSSESSE','DRUG PARAPHERNALIA,POSSESSE')\n",
    "df['pd_desc'] = df['pd_desc'].replace('OBSCENE MATERIAL - UNDER 17 YE','OBSCENE MATERIAL-UNDER 17 YE')\n",
    "df['pd_desc'] = df['pd_desc'].replace('MARIJUANA, POSSESSION 1, 2 & 3','MARIJUANA,POSSESSION 1,2 & 3')\n",
    "df['pd_desc'] = df['pd_desc'].replace('MARIJUANA, POSSESSION','MARIJUANA,POSSESSION')\n",
    "df['pd_desc'] = df['pd_desc'].replace('CONTROLLED SUBSTANCE, INTENT T','CONTROLLED SUBSTANCE,INTENT T')\n",
    "df['pd_desc'] = df['pd_desc'].replace('CONTROLLED SUBSTANCE, SALE 5','CONTROLLED SUBSTANCE,SALE 5')\n",
    "df['pd_desc'] = df['pd_desc'].replace('UNAUTH. SALE OF TRANS. SERVICE','UNAUTH.SALE OF TRANS.SERVICE')\n",
    "df['pd_desc'] = df['pd_desc'].replace('ARSON, MOTOR VEHICLE 1 2 3 & 4','ARSON,MOTOR VEHICLE 1 2 3 & 4')\n",
    "df['pd_desc'] = df['pd_desc'].replace('MARIJUANA, SALE 4 & 5','MARIJUANA,SALE 4 & 5')\n",
    "df['pd_desc'] = df['pd_desc'].replace('MISCHIEF, CRIMINAL 4, BY FIRE','MISCHIEF,CRIMINAL 4,BY FIRE')\n",
    "df['pd_desc'] = df['pd_desc'].replace('TRESPASS 3, CRIMINAL','TRESPASS 3,CRIMINAL')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY,GRAND FROM NIGHT CLUB, UNATTENDED','LARCENY,GRAND FROM NIGHT CLUB,UNATTENDED')\n",
    "df['pd_desc'] = df['pd_desc'].replace('IMPERSONATION 2, PUBLIC SERVAN','IMPERSONATION 2,PUBLIC SERVAN')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY,GRAND BY OPEN CREDIT CARD (NEW ACCT)','LARCENY,GRAND BY OPEN CREDIT CARD(NEW ACCT)')\n",
    "df['pd_desc'] = df['pd_desc'].replace('THEFT OF SERVICES, UNCLASSIFIE','THEFT OF SERVICES,UNCLASSIFIE')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY,GRAND FROM EATERY, UNATTENDED','LARCENY,GRAND FROM EATERY,UNATTENDED')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY,GRAND FROM RETAIL STORE, UNATTENDED','LARCENY,GRAND FROM RETAIL STORE,UNATTENDED')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY,GRAND FROM PERSON, BAG OPEN/DIP','LARCENY,GRAND FROM PERSON,BAG OPEN/DIP')\n",
    "df['pd_desc'] = df['pd_desc'].replace('CHILD, ENDANGERING WELFARE','CHILD,ENDANGERING WELFARE')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY,GRAND FROM RESIDENCE, UNATTENDED','LARCENY,GRAND FROM RESIDENCE,UNATTENDED')\n",
    "df['pd_desc'] = df['pd_desc'].replace('TRESPASS 2, CRIMINAL','TRESPASS 2,CRIMINAL')\n",
    "df['pd_desc'] = df['pd_desc'].replace('WEAPONS, POSSESSION, ETC','WEAPONS,POSSESSION,ETC')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY,GRAND FROM BUILDING (NON-RESIDENCE) UNATTENDED','LARCENY,GRAND FROM BUILDING(NON-RESIDENCE)UNATTENDED')\n",
    "df['pd_desc'] = df['pd_desc'].replace('MISCHIEF, CRIMINAL 3 & 2, OF M','MISCHIEF,CRIMINAL 3 & 2, OF M')\n",
    "df['pd_desc'] = df['pd_desc'].replace('MARIJUANA, POSSESSION 4 & 5','MARIJUANA,POSSESSION 4 & 5')\n",
    "df['pd_desc'] = df['pd_desc'].replace('MISCHIEF,CRIMINAL,    UNCL 2ND','MISCHIEF,CRIMINAL,UNCL 2ND')\n",
    "df['pd_desc'] = df['pd_desc'].replace('CONTROLLED SUBSTANCE, POSSESSI','CONTROLLED SUBSTANCE,POSSESSI')\n",
    "df['pd_desc'] = df['pd_desc'].replace('CRIMINAL MISCHIEF 4TH, GRAFFIT','CRIMINAL MISCHIEF 4TH,GRAFFIT')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['pd_desc'] = df['pd_desc'].replace('PROSTITUTION 3, PROMOTING UNDE','PROSTITUTION 3,PROMOTING UNDE')\n",
    "df['pd_desc'] = df['pd_desc'].replace('DIS. CON.,AGGRAVATED','DIS.CON.AGGRAVATED')\n",
    "df['pd_desc'] = df['pd_desc'].replace('CONTROLLED SUBSTANCE,POSSESS.-','CONTROLLED SUBSTANCE,POSSESS')\n",
    "df['pd_desc'] = df['pd_desc'].replace('BRIBERY, POLICE OFFICER','BRIBERY,POLICE OFFICER')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY,GRAND FROM BOAT, UNATTENDED','LARCENY,GRAND FROM BOAT,UNATTENDED')\n",
    "df['pd_desc'] = df['pd_desc'].replace('CONSPIRACY 2, 1','CONSPIRACY 2,1')\n",
    "df['pd_desc'] = df['pd_desc'].replace('STOLEN PROP-MOTOR VEHICLE 3RD,','STOLEN PROP-MOTOR VEHICLE 3RD')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY, GRAND OF AUTO - ATTEM','LARCENY,GRAND OF AUTO ATTEM')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY,GRAND FROM RESIDENCE/BUILDING,UNATTENDED, PACKAGE THEFT INSIDE','LARCENY,GRAND FROM RESIDENCE/BUILDING,UNATTENDED,PACKAGE THEFT INSIDE')\n",
    "df['pd_desc'] = df['pd_desc'].replace('CONSPIRACY 4, 3','CONSPIRACY 4,3')\n",
    "df['pd_desc'] = df['pd_desc'].replace('MATERIAL              OFFENSIV','MATERIAL OFFENSIV')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY,PETIT FROM BUILDING,UNATTENDED, PACKAGE THEFT OUTSIDE','LARCENY,PETIT FROM BUILDING,UNATTENDED,PACKAGE THEFT OUTSIDE')\n",
    "df['pd_desc'] = df['pd_desc'].replace('FIREWORKS, POSSESS/USE','FIREWORKS,POSSESS/USE')\n",
    "df['pd_desc'] = df['pd_desc'].replace('GAMBLING, DEVICE, POSSESSION','GAMBLING,DEVICE,POSSESSION')\n",
    "df['pd_desc'] = df['pd_desc'].replace('SUPP. ACT TERR 2ND','SUPP.ACT TERR 2ND')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY,GRAND FROM PIER, UNATTENDED','LARCENY,GRAND FROM PIER,UNATTENDED')\n",
    "df['pd_desc'] = df['pd_desc'].replace('MISCHIEF, CRIMINAL 3&2, BY FIR','MISCHIEF,CRIMINAL 3&2,BY FIR')\n",
    "df['pd_desc'] = df['pd_desc'].replace('THEFT OF SERVICES- CABLE TV SE','THEFT OF SERVICES-CABLE TV SE')\n",
    "df['pd_desc'] = df['pd_desc'].replace('PROSTITUTION, PATRONIZING 4, 3','PROSTITUTION,PATRONIZING 4,3')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY,GRAND FROM TRUCK, UNATTENDED','LARCENY,GRAND FROM TRUCK,UNATTENDED')\n",
    "df['pd_desc'] = df['pd_desc'].replace('TAMPERING 3,2, CRIMINAL','TAMPERING 3,2,CRIMINAL')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY, PETIT OF MOPED','LARCENY,PETIT OF MOPED')\n",
    "df['pd_desc'] = df['pd_desc'].replace('OBSCENITY, PERFORMANCE 3','OBSCENITY,PERFORMANCE 3')\n",
    "df['pd_desc'] = df['pd_desc'].replace('CONTROLLED SUBSTANCE, SALE 4','CONTROLLED SUBSTANCE,SALE 4')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY,PETIT FROM BUILDING,UNATTENDED, PACKAGE THEFT INSIDE','LARCENY,PETIT FROM BUILDING,UNATTENDED,PACKAGE THEFT INSIDE')\n",
    "df['pd_desc'] = df['pd_desc'].replace('COMPUTER UNAUTH. USE/TAMPER','COMPUTER UNAUTH.USE/TAMPER')\n",
    "df['pd_desc'] = df['pd_desc'].replace('MENACING 1ST DEGREE (VICT PEAC','MENACING 1ST DEGREE(VICT PEAC')\n",
    "df['pd_desc'] = df['pd_desc'].replace('MARIJUANA, SALE 1, 2 & 3','MARIJUANA,SALE 1,2 & 3')\n",
    "df['pd_desc'] = df['pd_desc'].replace('MENACING 1ST DEGREE (VICT NOT','MENACING 1ST DEGREE(VICT NOT')\n",
    "df['pd_desc'] = df['pd_desc'].replace('STOLEN PROPERTY-MOTOR VEH 2ND,','STOLEN PROPERTY-MOTOR VEH 2ND')\n",
    "df['pd_desc'] = df['pd_desc'].replace('LARCENY, GRAND OF MOPED','LARCENY,GRAND OF MOPED')\n",
    "df['pd_desc'] = df['pd_desc'].replace('IMPERSONATION 1, POLICE OFFICE','IMPERSONATION 1,POLICE OFFICE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "spec_chars = [\".\",\"-\",\"(\",\")\",\"/\",\",\", \"'\"]\n",
    "\n",
    "for char in spec_chars:\n",
    "    df['pd_desc'] = df['pd_desc'].str.lower().str.replace(char, '_')\n",
    "\n",
    "for char in spec_chars:\n",
    "    df['pd_desc'] = df['pd_desc'].str.replace(' ', '_')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['pd_desc'] = df['pd_desc'].replace('mischief__criminal_4__of_motor','mischief_criminal_4_of_motor')\n",
    "df['pd_desc'] = df['pd_desc'].replace('larceny_petit_from_open_areas_','larceny_petit_from_open_areas')\n",
    "df['pd_desc'] = df['pd_desc'].replace('mischief_criminal_3_&_2__of_m','mischief_criminal_3_&_2_of_m')\n",
    "df['pd_desc'] = df['pd_desc'].replace('forgery_etc__unclassified_felo','forgery_etc_unclassified_felo')\n",
    "df['pd_desc'] = df['pd_desc'].replace('larceny_grand_from_open_areas__unattended','larceny_grand_from_open_areas_unattended')\n",
    "df['pd_desc'] = df['pd_desc'].replace('forgery_etc__misd_','forgery_etc_misd')\n",
    "df['pd_desc'] = df['pd_desc'].replace('larceny_grand_by_open_credit_card_new_acct_','larceny_grand_by_open_credit_card_new_acct')\n",
    "df['pd_desc'] = df['pd_desc'].replace('controlled_substance_possess_','controlled_substance_possess')\n",
    "df['pd_desc'] = df['pd_desc'].replace('larceny_grand_from_person_lush_worker_sleeping_uncon_victim_','larceny_grand_from_person_lush_worker_sleeping_uncon_victim')\n",
    "df['pd_desc'] = df['pd_desc'].replace('forgery_m_v__registration','forgery_m_v_registration')\n",
    "df['pd_desc'] = df['pd_desc'].replace('mischief_criminal_3&2_by_fir','mischief_criminal_3_&_2_by_fir')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['patrol_boro'].isnull().sum()\n",
    "df['patrol_boro'].value_counts\n",
    "df.replace({'patrol_boro': np.nan}, {'patrol_boro': 'unknown'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['prem_typ_desc'].isnull().sum()\n",
    "df['prem_typ_desc'].value_counts\n",
    "df.replace({'prem_typ_desc': np.nan}, {'prem_typ_desc': 'unknown'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['zipcodes'].value_counts\n",
    "df.replace({'zipcodes': np.nan}, {'zipcodes': 'unknown'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['pd_desc'].value_counts\n",
    "df.replace({'pd_desc': np.nan}, {'pd_desc': 'unknown'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cmplnt_num                     0\n",
       "cmplnt_fr_dt                   0\n",
       "cmplnt_fr_tm                   0\n",
       "rpt_dt                         0\n",
       "ky_cd                          0\n",
       "ofns_desc                      0\n",
       "pd_cd                          0\n",
       "pd_desc                        0\n",
       "law_cat_cd                     0\n",
       "boro_nm                        0\n",
       "prem_typ_desc                  0\n",
       "susp_age_group                 0\n",
       "susp_race                      0\n",
       "susp_sex                       0\n",
       "latitude                       0\n",
       "longitude                      0\n",
       "patrol_boro                    0\n",
       "vic_age_group                  0\n",
       "vic_race                       0\n",
       "vic_sex                        0\n",
       "population                     0\n",
       "area                           0\n",
       "county                         0\n",
       "zipcodes                       0\n",
       "adjusted_gross_income_(agi)    0\n",
       "avg_agi                        0\n",
       "total_income_amount            0\n",
       "avg_total_income               0\n",
       "taxable_income_amount          0\n",
       "avg_taxable_income             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cmplnt_num</th>\n",
       "      <th>cmplnt_fr_dt</th>\n",
       "      <th>cmplnt_fr_tm</th>\n",
       "      <th>rpt_dt</th>\n",
       "      <th>ky_cd</th>\n",
       "      <th>ofns_desc</th>\n",
       "      <th>pd_cd</th>\n",
       "      <th>pd_desc</th>\n",
       "      <th>law_cat_cd</th>\n",
       "      <th>boro_nm</th>\n",
       "      <th>prem_typ_desc</th>\n",
       "      <th>susp_age_group</th>\n",
       "      <th>susp_race</th>\n",
       "      <th>susp_sex</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>patrol_boro</th>\n",
       "      <th>vic_age_group</th>\n",
       "      <th>vic_race</th>\n",
       "      <th>vic_sex</th>\n",
       "      <th>population</th>\n",
       "      <th>area</th>\n",
       "      <th>county</th>\n",
       "      <th>zipcodes</th>\n",
       "      <th>adjusted_gross_income_(agi)</th>\n",
       "      <th>avg_agi</th>\n",
       "      <th>total_income_amount</th>\n",
       "      <th>avg_total_income</th>\n",
       "      <th>taxable_income_amount</th>\n",
       "      <th>avg_taxable_income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>686917220</td>\n",
       "      <td>2018-04-18</td>\n",
       "      <td>16:58 PM</td>\n",
       "      <td>2019-04-18</td>\n",
       "      <td>344</td>\n",
       "      <td>assault_3_&amp;_related_offenses</td>\n",
       "      <td>101</td>\n",
       "      <td>assault_3</td>\n",
       "      <td>misdemeanor</td>\n",
       "      <td>brooklyn</td>\n",
       "      <td>other</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>u</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>bklyn_north</td>\n",
       "      <td>4564</td>\n",
       "      <td>black</td>\n",
       "      <td>m</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>444236774</td>\n",
       "      <td>2018-07-13</td>\n",
       "      <td>23:00 PM</td>\n",
       "      <td>2019-04-12</td>\n",
       "      <td>101</td>\n",
       "      <td>murder_&amp;_nonnegl_manslaughter</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>felony</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>u</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>unknown</td>\n",
       "      <td>4564</td>\n",
       "      <td>black</td>\n",
       "      <td>m</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>864262100</td>\n",
       "      <td>2018-03-27</td>\n",
       "      <td>22:00 PM</td>\n",
       "      <td>2019-04-01</td>\n",
       "      <td>578</td>\n",
       "      <td>harrassment_2</td>\n",
       "      <td>638</td>\n",
       "      <td>harassment_subd_3_4_5</td>\n",
       "      <td>violation</td>\n",
       "      <td>brooklyn</td>\n",
       "      <td>residence_apt_house</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>u</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>bklyn_north</td>\n",
       "      <td>2544</td>\n",
       "      <td>white</td>\n",
       "      <td>f</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>383311341</td>\n",
       "      <td>2018-11-14</td>\n",
       "      <td>18:00 PM</td>\n",
       "      <td>2019-03-22</td>\n",
       "      <td>116</td>\n",
       "      <td>sex_crimes</td>\n",
       "      <td>168</td>\n",
       "      <td>sodomy_1</td>\n",
       "      <td>felony</td>\n",
       "      <td>queens</td>\n",
       "      <td>residence_house</td>\n",
       "      <td>unknown</td>\n",
       "      <td>black</td>\n",
       "      <td>u</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>queens_south</td>\n",
       "      <td>&lt;18</td>\n",
       "      <td>black</td>\n",
       "      <td>f</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>555889431</td>\n",
       "      <td>2018-11-12</td>\n",
       "      <td>08:00 AM</td>\n",
       "      <td>2019-03-28</td>\n",
       "      <td>341</td>\n",
       "      <td>petit_larceny</td>\n",
       "      <td>349</td>\n",
       "      <td>larceny_petit_of_license_plate</td>\n",
       "      <td>misdemeanor</td>\n",
       "      <td>brooklyn</td>\n",
       "      <td>residence_house</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>u</td>\n",
       "      <td>nan</td>\n",
       "      <td>nan</td>\n",
       "      <td>bklyn_south</td>\n",
       "      <td>4564</td>\n",
       "      <td>white</td>\n",
       "      <td>m</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  cmplnt_num cmplnt_fr_dt cmplnt_fr_tm     rpt_dt ky_cd  \\\n",
       "0  686917220   2018-04-18     16:58 PM 2019-04-18   344   \n",
       "1  444236774   2018-07-13     23:00 PM 2019-04-12   101   \n",
       "2  864262100   2018-03-27     22:00 PM 2019-04-01   578   \n",
       "3  383311341   2018-11-14     18:00 PM 2019-03-22   116   \n",
       "4  555889431   2018-11-12     08:00 AM 2019-03-28   341   \n",
       "\n",
       "                       ofns_desc pd_cd                         pd_desc  \\\n",
       "0   assault_3_&_related_offenses   101                       assault_3   \n",
       "1  murder_&_nonnegl_manslaughter     0                         unknown   \n",
       "2                  harrassment_2   638           harassment_subd_3_4_5   \n",
       "3                     sex_crimes   168                        sodomy_1   \n",
       "4                  petit_larceny   349  larceny_petit_of_license_plate   \n",
       "\n",
       "    law_cat_cd   boro_nm        prem_typ_desc susp_age_group susp_race  \\\n",
       "0  misdemeanor  brooklyn                other        unknown   unknown   \n",
       "1       felony   unknown              unknown              0   unknown   \n",
       "2    violation  brooklyn  residence_apt_house        unknown   unknown   \n",
       "3       felony    queens      residence_house        unknown     black   \n",
       "4  misdemeanor  brooklyn      residence_house              0   unknown   \n",
       "\n",
       "  susp_sex latitude longitude   patrol_boro vic_age_group vic_race vic_sex  \\\n",
       "0        u      nan       nan   bklyn_north          4564    black       m   \n",
       "1        u      nan       nan       unknown          4564    black       m   \n",
       "2        u      nan       nan   bklyn_north          2544    white       f   \n",
       "3        u      nan       nan  queens_south           <18    black       f   \n",
       "4        u      nan       nan   bklyn_south          4564    white       m   \n",
       "\n",
       "   population  area county zipcodes  adjusted_gross_income_(agi)  avg_agi  \\\n",
       "0         NaN   NaN    NaN  unknown                          NaN      NaN   \n",
       "1         NaN   NaN    NaN  unknown                          NaN      NaN   \n",
       "2         NaN   NaN    NaN  unknown                          NaN      NaN   \n",
       "3         NaN   NaN    NaN  unknown                          NaN      NaN   \n",
       "4         NaN   NaN    NaN  unknown                          NaN      NaN   \n",
       "\n",
       "   total_income_amount  avg_total_income  taxable_income_amount  \\\n",
       "0                  NaN               NaN                    NaN   \n",
       "1                  NaN               NaN                    NaN   \n",
       "2                  NaN               NaN                    NaN   \n",
       "3                  NaN               NaN                    NaN   \n",
       "4                  NaN               NaN                    NaN   \n",
       "\n",
       "   avg_taxable_income  \n",
       "0                 NaN  \n",
       "1                 NaN  \n",
       "2                 NaN  \n",
       "3                 NaN  \n",
       "4                 NaN  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.dropna(subset= ['population'], inplace = True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.dropna(subset= ['avg_agi'], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv('complaints_2018_final.csv', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "petit_larceny                          174667\n",
       "harrassment_2                          141584\n",
       "assault_3_&_related_offenses           105621\n",
       "criminal_mischief_&_related_of          93995\n",
       "grand_larceny                           85267\n",
       "felony_assault                          40763\n",
       "off_agnst_pub_ord_sensblty_&            39824\n",
       "dangerous_drugs                         28541\n",
       "miscellaneous_penal_law                 27432\n",
       "robbery                                 26150\n",
       "burglary                                22376\n",
       "offenses_against_public_admini          15165\n",
       "dangerous_weapons                       14137\n",
       "sex_crimes                              13495\n",
       "vehicle_and_traffic_laws                13374\n",
       "grand_larceny_of_motor_vehicle          10805\n",
       "forgery                                  9908\n",
       "intoxicated_&_impaired_driving           9287\n",
       "theft_fraud                              7594\n",
       "criminal_trespass                        6287\n",
       "frauds                                   4671\n",
       "unauthorized_use_of_a_vehicle            3227\n",
       "possession_of_stolen_property            3160\n",
       "rape                                     2986\n",
       "other_offenses_related_to_thef           2613\n",
       "offenses_against_the_person              2417\n",
       "offenses_involving_fraud                 2129\n",
       "administrative_code                      2115\n",
       "arson                                    1427\n",
       "nys_laws_unclassified_felony             1358\n",
       "theft_of_services                         817\n",
       "burglars_tools                            625\n",
       "murder_&_nonnegl_manslaughter             604\n",
       "other_state_laws_non_penal_la             543\n",
       "gambling                                  431\n",
       "fraudulent_accosting                      352\n",
       "agriculture_&_mrkts_lawunclassified       270\n",
       "kidnapping_&_related_offenses             231\n",
       "alcoholic_beverage_control_law            216\n",
       "petit_larceny_of_motor_vehicle            164\n",
       "offenses_related_to_children              157\n",
       "prostitution_&_related_offenses           147\n",
       "offenses_against_public_safety             97\n",
       "disorderly_conduct                         74\n",
       "jostling                                   68\n",
       "endan_welfare_incomp                       50\n",
       "child_abandonment_non_support              37\n",
       "nys_laws_unclassified_violation            29\n",
       "unknown                                    22\n",
       "kidnapping                                 22\n",
       "other_state_laws                           22\n",
       "homicide_negligent_unclassifie             21\n",
       "escape_3                                   17\n",
       "loitering_gambling_cards_dic               13\n",
       "anticipatory_offenses                      12\n",
       "felony_sex_crimes                          10\n",
       "intoxicatedimpaired_driving                 9\n",
       "unlawful_poss_weap_on_school                5\n",
       "disruption_of_a_religious_serv              4\n",
       "homicidenegligentvehicle                    4\n",
       "new_york_city_health_code                   3\n",
       "kidnapping_and_related_offenses             1\n",
       "other_state_laws_non_penal_law              1\n",
       "other_traffic_infraction                    1\n",
       "abortion                                    1\n",
       "offenses_against_marriage_uncl              1\n",
       "Name: ofns_desc, dtype: int64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ofns_desc'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
